#include "skin.hpp"

/////////////////////////////////////////////////////////////////
///////////////// SElement //////////////////////////////////////
/////////////////////////////////////////////////////////////////

SElement::SElement(SType &a_type)
  : m_stype(&a_type)
{
}

SElement::get_name()
{
  return m_name;
}

/////////////////////////////////////////////////////////////////
///////////////// Stype /////////////////////////////////////////
/////////////////////////////////////////////////////////////////

SType::SType()
{
}

SType::SType(string a_name)
  :m_stype_name(a_name)
{
}

const string            &SType::get_name()
{
  return m_stype_name;
}

bool                    Stype::operator==(SType &that)
{
  return this->m_stype_name == that.m_stype_name;
}

bool                    Stype::operator==(string &that)
{
  return this->m_stype_name == that;
}

/////////////////////////////////////////////////////////////////
////////////////////// Skin /////////////////////////////////////
/////////////////////////////////////////////////////////////////

SElement                *Skin::get_element(string a_name)
{
  return m_emap.find(a_name);
}

void                    Skin::register_element(SElement &a_el)
{
  m_emap.insert(a_el->get_name(), &a_el);
}

/////////////////////////////////////////////////////////////////
////////////////////// Skin Manager /////////////////////////////
/////////////////////////////////////////////////////////////////

Skin                    &SManager::get_element(string a_name)
{
  return m_smap.find(a_name);
}

void                    SManager::register_element(Skin &a_el)
{
  m_emap.insert(a_el.get_name(), a_el);
}

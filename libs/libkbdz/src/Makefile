# Makefile.in generated by automake 1.10 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





pkgdatadir = $(datadir)/libkbdz
pkglibdir = $(libdir)/libkbdz
pkgincludedir = $(includedir)/libkbdz
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
TESTS = test-lfrb$(EXEEXT) test-kbdz$(EXEEXT)
check_PROGRAMS = test-lfrb$(EXEEXT) test-kbdz$(EXEEXT)
subdir = src
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(libdir)"
libLTLIBRARIES_INSTALL = $(INSTALL)
LTLIBRARIES = $(lib_LTLIBRARIES)
libkbdz_la_DEPENDENCIES =
am_libkbdz_la_OBJECTS = libkbdz_la-foncteurs.lo libkbdz_la-help.lo \
	libkbdz_la-thread.lo libkbdz_la-lfringbuffer.lo \
	libkbdz_la-kmain.lo libkbdz_la-evdev_input.lo \
	libkbdz_la-iInput.lo libkbdz_la-iOutput.lo \
	libkbdz_la-aseq_output.lo libkbdz_la-mapping.lo
libkbdz_la_OBJECTS = $(am_libkbdz_la_OBJECTS)
am_test_kbdz_OBJECTS = test_kbdz-test_kbdz.$(OBJEXT)
test_kbdz_OBJECTS = $(am_test_kbdz_OBJECTS)
test_kbdz_DEPENDENCIES = libkbdz.la
am_test_lfrb_OBJECTS = test_lfrb-test_lfrb.$(OBJEXT) \
	test_lfrb-lfringbuffer.$(OBJEXT)
test_lfrb_OBJECTS = $(am_test_lfrb_OBJECTS)
test_lfrb_DEPENDENCIES = libkbdz.la
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libkbdz_la_SOURCES) $(test_kbdz_SOURCES) \
	$(test_lfrb_SOURCES)
DIST_SOURCES = $(libkbdz_la_SOURCES) $(test_kbdz_SOURCES) \
	$(test_lfrb_SOURCES)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/lta/code/lab-audio/libs/libkbdz/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/lta/code/lab-audio/libs/libkbdz/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/lta/code/lab-audio/libs/libkbdz/missing --run autoconf
AUTOHEADER = ${SHELL} /home/lta/code/lab-audio/libs/libkbdz/missing --run autoheader
AUTOMAKE = ${SHELL} /home/lta/code/lab-audio/libs/libkbdz/missing --run automake-1.10
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE=\"libkbdz\" -DVERSION=\"0.0.1\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DHAVE_SEMAPHORE_H=1
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
F77 = 
FFLAGS = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAINT = 
MAKEINFO = ${SHELL} /home/lta/code/lab-audio/libs/libkbdz/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = libkbdz
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/bash
SIGC_CFLAGS = -I/usr/include/sigc++-2.0 -I/usr/lib/sigc++-2.0/include  
SIGC_LIBS = -lsigc-2.0  
STRIP = strip
VERSION = 0.0.1
abs_builddir = /home/lta/code/lab-audio/libs/libkbdz/src
abs_srcdir = /home/lta/code/lab-audio/libs/libkbdz/src
abs_top_builddir = /home/lta/code/lab-audio/libs/libkbdz
abs_top_srcdir = /home/lta/code/lab-audio/libs/libkbdz
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/lta/code/lab-audio/libs/libkbdz/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = ..
top_srcdir = ..
noinst_HEADERS = foncteurs.hpp help.hpp \
	thread.hpp lfringbuffer.hh kmain.hh evdev_input.hh \
	kevent.hh iInput.hh iOutput.hh mapping.hh


#include_HEADERS = kbdz_api.hpp

#######################
# Build an executable #
#######################

#INCLUDES = -I $(top_builddir)/src
lib_LTLIBRARIES = libkbdz.la
libkbdz_la_SOURCES = foncteurs.cpp help.cpp thread.cpp \
	lfringbuffer.cpp kmain.cpp evdev_input.cpp iInput.cpp \
	iOutput.cpp aseq_output.cpp mapping.cpp


# Don't forget that the order of the libraries _does_ matter
libkbdz_la_CPPFLAGS = -g -Wall -pthread -I/usr/include/sigc++-2.0 -I/usr/lib/sigc++-2.0/include  
libkbdz_la_LIBADD = -lpthread -lrt -lasound -lsigc-2.0  
#test_2_SOURCES = main_for_tests.cc
test_lfrb_SOURCES = test_lfrb.cpp lfringbuffer.cpp
test_lfrb_CPPFLAGS = -g -Wall -pthread -I/usr/include/sigc++-2.0 -I/usr/lib/sigc++-2.0/include  
test_lfrb_LDADD = libkbdz.la -lpthread -lrt -lsigc-2.0  
test_kbdz_SOURCES = test_kbdz.cpp
test_kbdz_CPPFLAGS = -g -Wall -pthread -I/usr/include/sigc++-2.0 -I/usr/lib/sigc++-2.0/include  
test_kbdz_LDADD = libkbdz.la -lpthread -lrt -lsigc-2.0  
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(libdir)/$$f'"; \
	    $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(libdir)/$$f"; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$p'"; \
	  $(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$p"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libkbdz.la: $(libkbdz_la_OBJECTS) $(libkbdz_la_DEPENDENCIES) 
	$(CXXLINK) -rpath $(libdir) $(libkbdz_la_OBJECTS) $(libkbdz_la_LIBADD) $(LIBS)

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
test-kbdz$(EXEEXT): $(test_kbdz_OBJECTS) $(test_kbdz_DEPENDENCIES) 
	@rm -f test-kbdz$(EXEEXT)
	$(CXXLINK) $(test_kbdz_OBJECTS) $(test_kbdz_LDADD) $(LIBS)
test-lfrb$(EXEEXT): $(test_lfrb_OBJECTS) $(test_lfrb_DEPENDENCIES) 
	@rm -f test-lfrb$(EXEEXT)
	$(CXXLINK) $(test_lfrb_OBJECTS) $(test_lfrb_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/libkbdz_la-aseq_output.Plo
include ./$(DEPDIR)/libkbdz_la-evdev_input.Plo
include ./$(DEPDIR)/libkbdz_la-foncteurs.Plo
include ./$(DEPDIR)/libkbdz_la-help.Plo
include ./$(DEPDIR)/libkbdz_la-iInput.Plo
include ./$(DEPDIR)/libkbdz_la-iOutput.Plo
include ./$(DEPDIR)/libkbdz_la-kmain.Plo
include ./$(DEPDIR)/libkbdz_la-lfringbuffer.Plo
include ./$(DEPDIR)/libkbdz_la-mapping.Plo
include ./$(DEPDIR)/libkbdz_la-thread.Plo
include ./$(DEPDIR)/test_kbdz-test_kbdz.Po
include ./$(DEPDIR)/test_lfrb-lfringbuffer.Po
include ./$(DEPDIR)/test_lfrb-test_lfrb.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

libkbdz_la-foncteurs.lo: foncteurs.cpp
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libkbdz_la-foncteurs.lo -MD -MP -MF $(DEPDIR)/libkbdz_la-foncteurs.Tpo -c -o libkbdz_la-foncteurs.lo `test -f 'foncteurs.cpp' || echo '$(srcdir)/'`foncteurs.cpp
	mv -f $(DEPDIR)/libkbdz_la-foncteurs.Tpo $(DEPDIR)/libkbdz_la-foncteurs.Plo
#	source='foncteurs.cpp' object='libkbdz_la-foncteurs.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libkbdz_la-foncteurs.lo `test -f 'foncteurs.cpp' || echo '$(srcdir)/'`foncteurs.cpp

libkbdz_la-help.lo: help.cpp
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libkbdz_la-help.lo -MD -MP -MF $(DEPDIR)/libkbdz_la-help.Tpo -c -o libkbdz_la-help.lo `test -f 'help.cpp' || echo '$(srcdir)/'`help.cpp
	mv -f $(DEPDIR)/libkbdz_la-help.Tpo $(DEPDIR)/libkbdz_la-help.Plo
#	source='help.cpp' object='libkbdz_la-help.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libkbdz_la-help.lo `test -f 'help.cpp' || echo '$(srcdir)/'`help.cpp

libkbdz_la-thread.lo: thread.cpp
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libkbdz_la-thread.lo -MD -MP -MF $(DEPDIR)/libkbdz_la-thread.Tpo -c -o libkbdz_la-thread.lo `test -f 'thread.cpp' || echo '$(srcdir)/'`thread.cpp
	mv -f $(DEPDIR)/libkbdz_la-thread.Tpo $(DEPDIR)/libkbdz_la-thread.Plo
#	source='thread.cpp' object='libkbdz_la-thread.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libkbdz_la-thread.lo `test -f 'thread.cpp' || echo '$(srcdir)/'`thread.cpp

libkbdz_la-lfringbuffer.lo: lfringbuffer.cpp
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libkbdz_la-lfringbuffer.lo -MD -MP -MF $(DEPDIR)/libkbdz_la-lfringbuffer.Tpo -c -o libkbdz_la-lfringbuffer.lo `test -f 'lfringbuffer.cpp' || echo '$(srcdir)/'`lfringbuffer.cpp
	mv -f $(DEPDIR)/libkbdz_la-lfringbuffer.Tpo $(DEPDIR)/libkbdz_la-lfringbuffer.Plo
#	source='lfringbuffer.cpp' object='libkbdz_la-lfringbuffer.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libkbdz_la-lfringbuffer.lo `test -f 'lfringbuffer.cpp' || echo '$(srcdir)/'`lfringbuffer.cpp

libkbdz_la-kmain.lo: kmain.cpp
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libkbdz_la-kmain.lo -MD -MP -MF $(DEPDIR)/libkbdz_la-kmain.Tpo -c -o libkbdz_la-kmain.lo `test -f 'kmain.cpp' || echo '$(srcdir)/'`kmain.cpp
	mv -f $(DEPDIR)/libkbdz_la-kmain.Tpo $(DEPDIR)/libkbdz_la-kmain.Plo
#	source='kmain.cpp' object='libkbdz_la-kmain.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libkbdz_la-kmain.lo `test -f 'kmain.cpp' || echo '$(srcdir)/'`kmain.cpp

libkbdz_la-evdev_input.lo: evdev_input.cpp
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libkbdz_la-evdev_input.lo -MD -MP -MF $(DEPDIR)/libkbdz_la-evdev_input.Tpo -c -o libkbdz_la-evdev_input.lo `test -f 'evdev_input.cpp' || echo '$(srcdir)/'`evdev_input.cpp
	mv -f $(DEPDIR)/libkbdz_la-evdev_input.Tpo $(DEPDIR)/libkbdz_la-evdev_input.Plo
#	source='evdev_input.cpp' object='libkbdz_la-evdev_input.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libkbdz_la-evdev_input.lo `test -f 'evdev_input.cpp' || echo '$(srcdir)/'`evdev_input.cpp

libkbdz_la-iInput.lo: iInput.cpp
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libkbdz_la-iInput.lo -MD -MP -MF $(DEPDIR)/libkbdz_la-iInput.Tpo -c -o libkbdz_la-iInput.lo `test -f 'iInput.cpp' || echo '$(srcdir)/'`iInput.cpp
	mv -f $(DEPDIR)/libkbdz_la-iInput.Tpo $(DEPDIR)/libkbdz_la-iInput.Plo
#	source='iInput.cpp' object='libkbdz_la-iInput.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libkbdz_la-iInput.lo `test -f 'iInput.cpp' || echo '$(srcdir)/'`iInput.cpp

libkbdz_la-iOutput.lo: iOutput.cpp
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libkbdz_la-iOutput.lo -MD -MP -MF $(DEPDIR)/libkbdz_la-iOutput.Tpo -c -o libkbdz_la-iOutput.lo `test -f 'iOutput.cpp' || echo '$(srcdir)/'`iOutput.cpp
	mv -f $(DEPDIR)/libkbdz_la-iOutput.Tpo $(DEPDIR)/libkbdz_la-iOutput.Plo
#	source='iOutput.cpp' object='libkbdz_la-iOutput.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libkbdz_la-iOutput.lo `test -f 'iOutput.cpp' || echo '$(srcdir)/'`iOutput.cpp

libkbdz_la-aseq_output.lo: aseq_output.cpp
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libkbdz_la-aseq_output.lo -MD -MP -MF $(DEPDIR)/libkbdz_la-aseq_output.Tpo -c -o libkbdz_la-aseq_output.lo `test -f 'aseq_output.cpp' || echo '$(srcdir)/'`aseq_output.cpp
	mv -f $(DEPDIR)/libkbdz_la-aseq_output.Tpo $(DEPDIR)/libkbdz_la-aseq_output.Plo
#	source='aseq_output.cpp' object='libkbdz_la-aseq_output.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libkbdz_la-aseq_output.lo `test -f 'aseq_output.cpp' || echo '$(srcdir)/'`aseq_output.cpp

libkbdz_la-mapping.lo: mapping.cpp
	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libkbdz_la-mapping.lo -MD -MP -MF $(DEPDIR)/libkbdz_la-mapping.Tpo -c -o libkbdz_la-mapping.lo `test -f 'mapping.cpp' || echo '$(srcdir)/'`mapping.cpp
	mv -f $(DEPDIR)/libkbdz_la-mapping.Tpo $(DEPDIR)/libkbdz_la-mapping.Plo
#	source='mapping.cpp' object='libkbdz_la-mapping.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libkbdz_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libkbdz_la-mapping.lo `test -f 'mapping.cpp' || echo '$(srcdir)/'`mapping.cpp

test_kbdz-test_kbdz.o: test_kbdz.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_kbdz_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_kbdz-test_kbdz.o -MD -MP -MF $(DEPDIR)/test_kbdz-test_kbdz.Tpo -c -o test_kbdz-test_kbdz.o `test -f 'test_kbdz.cpp' || echo '$(srcdir)/'`test_kbdz.cpp
	mv -f $(DEPDIR)/test_kbdz-test_kbdz.Tpo $(DEPDIR)/test_kbdz-test_kbdz.Po
#	source='test_kbdz.cpp' object='test_kbdz-test_kbdz.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_kbdz_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_kbdz-test_kbdz.o `test -f 'test_kbdz.cpp' || echo '$(srcdir)/'`test_kbdz.cpp

test_kbdz-test_kbdz.obj: test_kbdz.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_kbdz_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_kbdz-test_kbdz.obj -MD -MP -MF $(DEPDIR)/test_kbdz-test_kbdz.Tpo -c -o test_kbdz-test_kbdz.obj `if test -f 'test_kbdz.cpp'; then $(CYGPATH_W) 'test_kbdz.cpp'; else $(CYGPATH_W) '$(srcdir)/test_kbdz.cpp'; fi`
	mv -f $(DEPDIR)/test_kbdz-test_kbdz.Tpo $(DEPDIR)/test_kbdz-test_kbdz.Po
#	source='test_kbdz.cpp' object='test_kbdz-test_kbdz.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_kbdz_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_kbdz-test_kbdz.obj `if test -f 'test_kbdz.cpp'; then $(CYGPATH_W) 'test_kbdz.cpp'; else $(CYGPATH_W) '$(srcdir)/test_kbdz.cpp'; fi`

test_lfrb-test_lfrb.o: test_lfrb.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_lfrb_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_lfrb-test_lfrb.o -MD -MP -MF $(DEPDIR)/test_lfrb-test_lfrb.Tpo -c -o test_lfrb-test_lfrb.o `test -f 'test_lfrb.cpp' || echo '$(srcdir)/'`test_lfrb.cpp
	mv -f $(DEPDIR)/test_lfrb-test_lfrb.Tpo $(DEPDIR)/test_lfrb-test_lfrb.Po
#	source='test_lfrb.cpp' object='test_lfrb-test_lfrb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_lfrb_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_lfrb-test_lfrb.o `test -f 'test_lfrb.cpp' || echo '$(srcdir)/'`test_lfrb.cpp

test_lfrb-test_lfrb.obj: test_lfrb.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_lfrb_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_lfrb-test_lfrb.obj -MD -MP -MF $(DEPDIR)/test_lfrb-test_lfrb.Tpo -c -o test_lfrb-test_lfrb.obj `if test -f 'test_lfrb.cpp'; then $(CYGPATH_W) 'test_lfrb.cpp'; else $(CYGPATH_W) '$(srcdir)/test_lfrb.cpp'; fi`
	mv -f $(DEPDIR)/test_lfrb-test_lfrb.Tpo $(DEPDIR)/test_lfrb-test_lfrb.Po
#	source='test_lfrb.cpp' object='test_lfrb-test_lfrb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_lfrb_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_lfrb-test_lfrb.obj `if test -f 'test_lfrb.cpp'; then $(CYGPATH_W) 'test_lfrb.cpp'; else $(CYGPATH_W) '$(srcdir)/test_lfrb.cpp'; fi`

test_lfrb-lfringbuffer.o: lfringbuffer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_lfrb_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_lfrb-lfringbuffer.o -MD -MP -MF $(DEPDIR)/test_lfrb-lfringbuffer.Tpo -c -o test_lfrb-lfringbuffer.o `test -f 'lfringbuffer.cpp' || echo '$(srcdir)/'`lfringbuffer.cpp
	mv -f $(DEPDIR)/test_lfrb-lfringbuffer.Tpo $(DEPDIR)/test_lfrb-lfringbuffer.Po
#	source='lfringbuffer.cpp' object='test_lfrb-lfringbuffer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_lfrb_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_lfrb-lfringbuffer.o `test -f 'lfringbuffer.cpp' || echo '$(srcdir)/'`lfringbuffer.cpp

test_lfrb-lfringbuffer.obj: lfringbuffer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_lfrb_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_lfrb-lfringbuffer.obj -MD -MP -MF $(DEPDIR)/test_lfrb-lfringbuffer.Tpo -c -o test_lfrb-lfringbuffer.obj `if test -f 'lfringbuffer.cpp'; then $(CYGPATH_W) 'lfringbuffer.cpp'; else $(CYGPATH_W) '$(srcdir)/lfringbuffer.cpp'; fi`
	mv -f $(DEPDIR)/test_lfrb-lfringbuffer.Tpo $(DEPDIR)/test_lfrb-lfringbuffer.Po
#	source='lfringbuffer.cpp' object='test_lfrb-lfringbuffer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_lfrb_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_lfrb-lfringbuffer.obj `if test -f 'lfringbuffer.cpp'; then $(CYGPATH_W) 'lfringbuffer.cpp'; else $(CYGPATH_W) '$(srcdir)/lfringbuffer.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; ws='[	 ]'; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *$$ws$$tst$$ws*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *$$ws$$tst$$ws*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am: install-libLTLIBRARIES

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-libLTLIBRARIES

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-libLTLIBRARIES \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-libLTLIBRARIES


####################
# Additional Rules #
####################

re : clean all

c : clean

a : clean
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
